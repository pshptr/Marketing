1 func foo() {
2 print("A") 
3 
4 DispatchQueue.main.async {
5 assert(Thread.isMainThread)
6 print("B")
7 
8 DispatchQueue.main.async {
9 assert(Thread.isMainThread)
10 print("C")
11
12 DispatchQueue.main.async {
13 assert(Thread.isMainThread)
14 print("D")
15 }
16 }
17
18 DispatchQueue.global().sync {
19 print("E")
20
21 DispatchQueue.main.sync {
22 assert(Thread.isMainThread)
23 print("F")
24 }
25 }
26
27 print("G")
28 }
29
30 print("H")
31}
32
33 foo()





















1 protocol Loader {
2 	func load(completion: @escaping (Data) -> ())
3 }
4 
5 final class Worker {
6 	private let loader: Loader
7
8	init( loader: Loader) {
9		self.loader = loader
10	}
11
12	func doTheJob() {
13		loader.load { [weak self] data in			// [1]
14			DispatchQueue.main.async { [weak self] in // [2]
15				self?.onJobDone(with: data)
16			}
17		}
18	}
19
20	func onJobDone(with data: Data) {
21	// ...
22	}
23 }







1 let queue = DispatchQueue(label: "queue", attributes: .concurrent)
2
3 queue.sync {
4	print("A")
5 }
6
7 queue.async {
8	print("B")
9 }
10
11 queue.sync {
12	print("C")
13 }
